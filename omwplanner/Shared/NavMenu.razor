@inherits AppStateComponent
@inject Microsoft.Extensions.Configuration.IConfiguration Config

<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <a class="navbar-brand" href="">OMW Planner</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarContent">
        <i class="fas fa-hamburger"></i>
    </button>

    <div class="collapse navbar-collapse" id="navbarContent">
        <div class="row align-items-center w-100">
            <div class="col-auto">
                <i class="far fa-clock fa-lg text-light"></i>
                <span class="badge badge-info" style="position:relative;top:-5px;left:-5px;">@Elapsed</span>
            </div>
            <div class="col"></div>
            <div class="col-auto">
                <button class="btn btn-outline-info" @onclick="@(() => Mediator.Send(new AppState.ToggleJiraStatusAccordianAction()))">
                    <i class="fas fa-list"></i>
                </button>
            </div>
            <div class="col-auto">
                <button class="btn btn-outline-success" disabled="@Busy" @onclick="@(() => Refresh(true))">
                    <i class="fas fa-sync @(Busy ? "fa-spin" : string.Empty)"></i>
                </button>
            </div>
        </div>
    </div>
</nav>
<JiraStatusAccordion></JiraStatusAccordion>

@code {
    System.Timers.Timer EachMinute;
    TimeSpan elapsed;
    string Elapsed => elapsed.ToString("%m");
    bool Busy { get; set; }
    async Task Refresh(bool force = false)
    {
        Busy = true;
        await Mediator.Send(new OMWPlannerState.RefreshAction
        {
            Force = force
        });
        elapsed = DateTime.Now - OMWPlannerState.LastUpdate;
        Busy = false;
    }
    protected override async Task OnInitializedAsync()
    {
        await Refresh();
        EachMinute = new System.Timers.Timer(60000);
        EachMinute.Elapsed += ((Object source, System.Timers.ElapsedEventArgs e) =>
        {
            elapsed = DateTime.Now - OMWPlannerState.LastUpdate;
            InvokeAsync(StateHasChanged);
        });
        EachMinute.AutoReset = true;
        EachMinute.Enabled = true;
    }
}